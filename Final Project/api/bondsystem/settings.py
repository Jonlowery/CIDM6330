# settings.py (Add 'django_filters' to INSTALLED_APPS and Pagination)

"""
Django settings for bondsystem project.

Generated by 'django-admin startproject' using Django 5.2.
"""

from pathlib import Path
import os # Often needed for environment variables, good practice to include

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# SECURITY WARNING: keep the secret key used in production secret!
# It's recommended to load this from an environment variable in production
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'django-insecure-wsyq6c+zf2#=k7!%y+%6)*2-h13xog2k&z_lg0h=c$kkpge0kh')

# SECURITY WARNING: don't run with debug turned on in production!
# It's recommended to load this from an environment variable in production
DEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'

ALLOWED_HOSTS = []
# In production, set this to your domain(s), e.g., ['yourdomain.com', 'www.yourdomain.com']
# Or load from an environment variable:
# ALLOWED_HOSTS = os.environ.get('DJANGO_ALLOWED_HOSTS', '').split(',')


# Application definition

INSTALLED_APPS = [
    'whitenoise.runserver_nostatic',    # must come before django.contrib.staticfiles
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_filters',                   # *** ADDED django-filter app ***
    'portfolio.apps.PortfolioConfig',   # Your app
    'django_celery_beat',               # Added for Celery Beat scheduling
    'django_celery_results',            # Added for storing Celery results in DB (optional but useful)
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # serve static files
    'django.contrib.sessions.middleware.SessionMiddleware', # Handles session management
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware', # Associates users with requests using sessions.
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bondsystem.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'frontend'],   # you can add BASE_DIR / 'templates' here if you use them
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug', # Added for template debugging if needed
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bondsystem.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# Consider using PostgreSQL or another robust DB for production


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC' # Keep as UTC for consistency, especially with Celery Beat
USE_I18N = True
USE_TZ = True # Enable timezone support


# Static files (CSS, JavaScript, Images)
# --------------------------------------

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'frontend',      # <— this points Django’s staticfinder at your frontend/
]

# WhiteNoise will serve compressed files & add far-future cache headers
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Session Settings for Login Requirements
# ---------------------------------------

SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Log out user when browser is closed
SESSION_COOKIE_AGE = 900                 # Session expires after 15 minutes of inactivity
SESSION_SAVE_EVERY_REQUEST = True       # Reset session expiry timer on each request


# Django REST Framework configuration
# ------------------------------------

REST_FRAMEWORK = {
  'DEFAULT_AUTHENTICATION_CLASSES': [
    'rest_framework.authentication.TokenAuthentication',
    'rest_framework.authentication.SessionAuthentication', # SessionAuthentication is needed for browser-based interaction and session timeouts
  ],
  'DEFAULT_PERMISSION_CLASSES': [
    'rest_framework.permissions.IsAuthenticated', # Ensures only logged-in users can access API views by default
  ],
   'DEFAULT_FILTER_BACKENDS': [
       'django_filters.rest_framework.DjangoFilterBackend' # Ensure this backend is enabled
    ],
   # --- ADDED Pagination Settings ---
   # Sets the default pagination style for list views
   'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
   # Sets the default number of items returned per page (e.g., 25)
   'PAGE_SIZE': 25
   # Optional: Allow frontend to specify page size via query parameter (e.g., ?page_size=50)
   # 'PAGE_SIZE_QUERY_PARAM': 'page_size',
   # Optional: Set a maximum page size the frontend can request
   # 'MAX_PAGE_SIZE': 100
   # --- END Pagination Settings ---

   # Optional: Add default renderer classes if needed, including BrowsableAPIRenderer
   # 'DEFAULT_RENDERER_CLASSES': [
   #      'rest_framework.renderers.JSONRenderer',
   #      'rest_framework.renderers.BrowsableAPIRenderer', # Needed for the web view
   #  ]
}


# CORS — allow your frontend to call the API during development
# -------------------------------------------------------------
# Consider restricting this in production for security
CORS_ALLOW_ALL_ORIGINS = True
# Example for production:
# CORS_ALLOWED_ORIGINS = [
#     "https://yourfrontenddomain.com",
# ]


# Celery configuration (Ensure Redis is running)
# --------------------

CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', 'redis://redis:6379/0') # Use 'redis' hostname from docker-compose
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', 'redis://redis:6379/0') # Use 'redis' hostname
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE # Use Django's timezone
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler' # Use DB scheduler for Beat


# Email Settings (Gmail - HARDCODED - USING APP PASSWORD)
# -------------------------------------------------------
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'avionhwow@gmail.com' # Your Gmail address
EMAIL_HOST_PASSWORD = 'jhvm vgog vwdv zlui' # The 16-character App Password you generated
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER # Default 'From' address for emails sent by Django


# Login/Logout URLs
# --------------------------
LOGIN_URL = '/api-auth/login/'  # URL where users are redirected FOR login
LOGIN_REDIRECT_URL = '/' # Redirect to the main portfolio analyzer view after login
LOGOUT_REDIRECT_URL = '/api-auth/login/' # Redirect to login page after logout

# Security Settings (Consider uncommenting and configuring for Production)
# ---------------------------------------------------------------------
# SECURE_SSL_REDIRECT = True # Enforce HTTPS
# SESSION_COOKIE_SECURE = True # Send session cookie only over HTTPS
# CSRF_COOKIE_SECURE = True # Send CSRF cookie only over HTTPS
# SECURE_HSTS_SECONDS = 31536000 # 1 year - HTTP Strict Transport Security
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
# SECURE_BROWSER_XSS_FILTER = True
# X_FRAME_OPTIONS = 'DENY' # Prevent clickjacking
# SECURE_CONTENT_TYPE_NOSNIFF = True

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
