# Generated by Django 5.2 on 2025-05-04 19:20

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='InterestSchedule',
            fields=[
                ('schedule_code', models.CharField(help_text="Unique code for the interest schedule (from source system/Excel 'int_sched').", max_length=20, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text="Descriptive name (e.g., 'Semiannual', 'Monthly'). Name does NOT need to be unique.", max_length=100)),
                ('payments_per_year_default', models.PositiveSmallIntegerField(blank=True, help_text='Typical number of payments per year for this schedule (can be overridden on Security).', null=True)),
                ('description', models.TextField(blank=True, help_text='Optional longer description of the schedule.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Interest Payment Schedule',
                'verbose_name_plural': 'Interest Payment Schedules',
                'ordering': ['schedule_code'],
            },
        ),
        migrations.CreateModel(
            name='MunicipalOffering',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cusip', models.CharField(help_text='Unique 9-character CUSIP identifier.', max_length=9, unique=True)),
                ('amount', models.DecimalField(blank=True, decimal_places=2, help_text='Amount available.', max_digits=15, null=True)),
                ('description', models.CharField(blank=True, help_text='Description.', max_length=255)),
                ('coupon', models.DecimalField(blank=True, decimal_places=5, help_text='Coupon rate.', max_digits=8, null=True)),
                ('maturity_date', models.DateField(blank=True, help_text='Maturity date.', null=True)),
                ('yield_rate', models.DecimalField(blank=True, decimal_places=5, help_text='Yield.', max_digits=8, null=True)),
                ('price', models.DecimalField(blank=True, decimal_places=6, help_text='Price.', max_digits=12, null=True)),
                ('moody_rating', models.CharField(blank=True, help_text="Moody's rating.", max_length=10, null=True)),
                ('sp_rating', models.CharField(blank=True, help_text='S&P rating.', max_length=10, null=True)),
                ('call_date', models.DateField(blank=True, help_text='Call date.', null=True)),
                ('call_price', models.DecimalField(blank=True, decimal_places=6, help_text='Call price.', max_digits=12, null=True)),
                ('state', models.CharField(blank=True, help_text='State.', max_length=2, null=True)),
                ('insurance', models.CharField(blank=True, help_text='Insurance.', max_length=50, null=True)),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Last updated timestamp.')),
            ],
            options={
                'verbose_name': 'Municipal Offering',
                'verbose_name_plural': 'Municipal Offerings',
                'ordering': ['maturity_date', 'cusip'],
            },
        ),
        migrations.CreateModel(
            name='Salesperson',
            fields=[
                ('salesperson_id', models.CharField(help_text="Unique identifier for the salesperson (from source system/Excel 'slsm_id').", max_length=50, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(blank=True, help_text='Full name of the salesperson.', max_length=150, null=True)),
                ('email', models.EmailField(blank=True, help_text='Email address of the salesperson.', max_length=254, null=True, unique=True)),
                ('is_active', models.BooleanField(default=True, help_text='Is this salesperson currently active?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Salesperson',
                'verbose_name_plural': 'Salespeople',
                'ordering': ['name', 'salesperson_id'],
            },
        ),
        migrations.CreateModel(
            name='SecurityType',
            fields=[
                ('type_id', models.IntegerField(help_text="Integer identifier for the security type (from source system/Excel 'sec_type').", primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(help_text="Descriptive name of the security type (e.g., 'Municipal Bond - GO'). Name does NOT need to be unique.", max_length=100)),
                ('description', models.TextField(blank=True, help_text='Optional longer description of the security type.', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Security Type',
                'verbose_name_plural': 'Security Types',
                'ordering': ['type_id'],
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unique_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Internal unique identifier (UUID).', unique=True)),
                ('customer_number', models.IntegerField(db_index=True, help_text="External unique customer number (from Excel 'cust_num'). Primary external key.", unique=True)),
                ('name', models.CharField(help_text="Customer name (from Excel 'cust_na1'). Required.", max_length=150)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('city', models.CharField(help_text="City (from Excel 'city'). Required.", max_length=100)),
                ('state', models.CharField(help_text="Two-letter US state abbreviation (from Excel 'state'). Required.", max_length=2, validators=[django.core.validators.MinLengthValidator(2)])),
                ('portfolio_accounting_code', models.CharField(help_text="Internal code signifying portfolio accounting (from Excel 'ip_bnk'). Required.", max_length=50)),
                ('cost_of_funds_rate', models.DecimalField(blank=True, decimal_places=8, help_text="Cost of funds rate as a percentage (from Excel 'cost_funds'). E.g., 1.23456789 for 1.23456789%", max_digits=11, null=True)),
                ('federal_tax_bracket_rate', models.DecimalField(blank=True, decimal_places=8, help_text="Federal tax bracket rate as a percentage (from Excel 'fed_tax_bkt'). E.g., 35.12345678 for 35.12345678%", max_digits=11, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('users', models.ManyToManyField(blank=True, help_text="System users allowed to view/manage this customer's data.", related_name='customers', to=settings.AUTH_USER_MODEL)),
                ('salesperson', models.ForeignKey(blank=True, help_text="Salesperson assigned to this customer (linked via Excel 'slsm_id').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_customers', to='portfolio.salesperson')),
            ],
            options={
                'ordering': ['customer_number'],
            },
        ),
        migrations.CreateModel(
            name='Portfolio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='User-defined name for the portfolio.', max_length=100)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('is_default', models.BooleanField(default=False, help_text="Indicates if this is the default 'Primary Holdings' portfolio for the owner.")),
                ('owner', models.ForeignKey(help_text='The customer who owns this portfolio.', on_delete=django.db.models.deletion.CASCADE, related_name='portfolios', to='portfolio.customer')),
            ],
            options={
                'ordering': ['owner__customer_number', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Security',
            fields=[
                ('cusip', models.CharField(help_text="Unique 9-character CUSIP identifier (maps to Excel 'sec_id').", max_length=9, primary_key=True, serialize=False, unique=True, validators=[django.core.validators.MinLengthValidator(9)])),
                ('description', models.CharField(help_text="Security description (from Excel 'sec_desc_1'). Required.", max_length=200)),
                ('issue_date', models.DateField(help_text="Issue date (from Excel 'issue_dt'). Required.")),
                ('maturity_date', models.DateField(help_text="Maturity date (from Excel 'mat_dt'). Required.")),
                ('coupon', models.DecimalField(blank=True, decimal_places=8, help_text="Effective annual coupon rate (calculated from Excel 'rate'/'secrate_rate').", max_digits=12, null=True)),
                ('secondary_rate', models.DecimalField(blank=True, decimal_places=8, help_text="Secondary/override rate (from Excel 'secrate_rate').", max_digits=12, null=True)),
                ('rate_effective_date', models.DateField(blank=True, help_text="Date associated with the secondary rate (from Excel 'rate_dt').", null=True)),
                ('tax_code', models.CharField(choices=[('e', 'Exempt'), ('t', 'Taxable')], help_text="Tax status code (from Excel 'tax_cd'). 'e' or 't'. Required.", max_length=1)),
                ('interest_day', models.PositiveSmallIntegerField(help_text="Day of the month interest is typically paid (from Excel 'int_day'). Required.", validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('interest_calc_code', models.CharField(choices=[('a', 'Actual'), ('c', '30/360'), ('h', 'Actual/365')], help_text="Interest calculation code (from Excel 'int_calc_cd'). 'a', 'c', or 'h'. Required.", max_length=1)),
                ('payments_per_year', models.PositiveSmallIntegerField(help_text="Number of coupon payments per year (from Excel 'ppy'). Required.")),
                ('allows_paydown', models.BooleanField(default=False, help_text="Does the principal pay down over time? (Derived from Excel 'prin_paydown' 'y'/'n'). Required.")),
                ('payment_delay_days', models.PositiveSmallIntegerField(default=0, help_text="Delay in days between accrual end and payment date (from Excel 'pmt_delay'). Required.")),
                ('factor', models.DecimalField(decimal_places=10, default=1.0, help_text="Current principal paydown factor (from Excel 'factor', adjusted based on 'allows_paydown').", max_digits=18)),
                ('call_date', models.DateField(blank=True, help_text='Optional first call date.', null=True)),
                ('wal', models.DecimalField(blank=True, decimal_places=3, help_text='Weighted Average Life (consider recalculating).', max_digits=8, null=True)),
                ('issuer_name', models.CharField(blank=True, max_length=200, null=True)),
                ('currency', models.CharField(blank=True, default='USD', max_length=3, null=True)),
                ('callable_flag', models.BooleanField(default=False, help_text='Is the security callable? (Set based on call_date presence?).')),
                ('moody_rating', models.CharField(blank=True, max_length=10, null=True)),
                ('sp_rating', models.CharField(blank=True, max_length=10, null=True)),
                ('fitch_rating', models.CharField(blank=True, max_length=10, null=True)),
                ('sector', models.CharField(blank=True, max_length=100, null=True)),
                ('state_of_issuer', models.CharField(blank=True, max_length=2, null=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('interest_schedule', models.ForeignKey(blank=True, help_text="Interest payment schedule (linked via Excel 'int_sched').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='securities', to='portfolio.interestschedule')),
                ('security_type', models.ForeignKey(blank=True, help_text="Type of the security (linked via Excel 'sec_type').", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='securities', to='portfolio.securitytype')),
            ],
            options={
                'ordering': ['cusip'],
            },
        ),
        migrations.CreateModel(
            name='CustomerHolding',
            fields=[
                ('ticket_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique internal identifier (UUID) for this holding record.', primary_key=True, serialize=False, unique=True)),
                ('external_ticket', models.IntegerField(db_index=True, help_text="Unique external ticket number (from Excel 'ticket').", unique=True)),
                ('intention_code', models.CharField(choices=[('A', 'Available for Sale'), ('M', 'Held to Maturity'), ('T', 'Held for Trading')], help_text="Holding intention code (from Excel 'lc_xf1_cd'). Required.", max_length=1)),
                ('original_face_amount', models.DecimalField(decimal_places=8, help_text="Original face value of the holding (from Excel 'orig_face'). Required.", max_digits=40)),
                ('settlement_date', models.DateField(help_text="Date the holding settled (from Excel 'settle_dt'). Required.")),
                ('settlement_price', models.DecimalField(decimal_places=8, help_text="Price at which the holding settled (from Excel 'set_price'). Required.", max_digits=20)),
                ('book_price', models.DecimalField(decimal_places=8, help_text="Book value price of the holding (from Excel 'book_price'). Required.", max_digits=20)),
                ('book_yield', models.DecimalField(blank=True, decimal_places=8, help_text="Book yield of the holding (from Excel 'book_yield').", max_digits=20, null=True)),
                ('holding_duration', models.DecimalField(blank=True, decimal_places=8, help_text="Calculated duration of the holding at a point in time (from Excel 'hold_duration').", max_digits=20, null=True)),
                ('holding_average_life', models.DecimalField(blank=True, decimal_places=8, help_text="Calculated average life of the holding at a point in time (from Excel 'hold_avg_life').", max_digits=20, null=True)),
                ('holding_average_life_date', models.DateField(blank=True, help_text="Date corresponding to the average life calculation (from Excel 'hold_avg_life_dt').", null=True)),
                ('market_date', models.DateField(blank=True, help_text="Date of the market valuation (from Excel 'mkt_dt').", null=True)),
                ('market_price', models.DecimalField(blank=True, decimal_places=8, help_text="Market price on the market date (from Excel 'mkt_price').", max_digits=20, null=True)),
                ('market_yield', models.DecimalField(blank=True, decimal_places=8, help_text="Market yield on the market date (from Excel 'mkt_yield').", max_digits=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_modified_at', models.DateTimeField(auto_now=True)),
                ('portfolio', models.ForeignKey(help_text='The portfolio this holding belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='portfolio.portfolio')),
                ('security', models.ForeignKey(help_text="The security being held (linked via Excel 'sec_id' -> CUSIP).", on_delete=django.db.models.deletion.CASCADE, related_name='holdings', to='portfolio.security')),
            ],
            options={
                'ordering': ['portfolio', 'security__cusip'],
            },
        ),
        migrations.AddConstraint(
            model_name='portfolio',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('owner', 'is_default'), name='unique_default_portfolio_per_owner'),
        ),
        migrations.AddIndex(
            model_name='customerholding',
            index=models.Index(fields=['external_ticket'], name='portfolio_c_externa_68673f_idx'),
        ),
        migrations.AddIndex(
            model_name='customerholding',
            index=models.Index(fields=['portfolio', 'security'], name='portfolio_c_portfol_cc4ac7_idx'),
        ),
    ]
